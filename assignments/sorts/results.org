//OBSERVATION HOW DIFFERENT SORTING ALGORITHMS PERFORM

On a randomly selected array
    On a small size array all the algorithms(merge, quick1_badpivot, quick1_goodpivot,quick2_badpivot, and quick2_goodpivot) 
    performed the same they all had a run time of 0. But on a medium size vector of 500 quick2_badpivot and quick2_goodpivot 
    performed the best, than the quick1_goodpivot than quick1_badpivot and last was merge sort. This could be because the qsort2
    algorithm saves time on creating different vectors. When the size of the vector was increased more to 100000, qsort2 performed
    the best than the quick1_badpivot, quick1_goodpivot, and merge sort.

On an already sorted vector
    When I tested these three 
    algorithms on Already sorted vector of size 500, the quick sort2 was the fastest than the merge and than the Original quick sort.
    The Reason why the Original quick sort was the slowest becuase as it picks it's first element as the pivot point it still goes
    through the entire list to figure out that the list is already sorted.

